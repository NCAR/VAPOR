
uniform sampler3D volumeTexture;
vec3 permute(vec3 v);

uniform vec3 dimensions;
vec3 dataGradient(vec3 coord)
{
  const float pi = 3.14159;

  vec3 sgradient;
  vec3 gradient;

  float dx = 0.5/(dimensions.x);
  float dy = 0.5/(dimensions.y);
  float dz = 0.5/(dimensions.z);
  
  vec3 a0;
  vec3 a1;

  a0.x = texture3D(volumeTexture, coord + vec3(dx,0,0)).x;
  a1.x = texture3D(volumeTexture, coord + vec3(-dx,0,0)).x;
  a0.y = texture3D(volumeTexture, coord + vec3(0,dy,0)).x;
  a1.y = texture3D(volumeTexture, coord + vec3(0,-dy,0)).x;
  a0.z = texture3D(volumeTexture, coord + vec3(0,0,dz)).x;
  a1.z = texture3D(volumeTexture, coord + vec3(0,0,-dz)).x;

  // 
  // Compute the spherical gradient 
  // 
  sgradient = permute((a1-a0)/2.0);
  //sgradient.x = (sgradient.x / (coord.z * sin(coord.y*pi-pi/2.0)));
  //sgradient.y = (sgradient.y / coord.z); 

  // 
  // Transform the vector into the cartesian coordinate space 
  // 
  float sinphi = sin(sgradient.x * 2.0*pi-pi);
  float cosphi = cos(sgradient.x * 2.0*pi-pi);
  float sintheta = sin(sgradient.y * pi - pi/2.0);
  float costheta = cos(sgradient.y * pi - pi/2.0);

  mat3 t = mat3(-sinphi, costheta*cosphi,   sintheta*cosphi,
                cosphi,  sintheta*sintheta, costheta*sinphi,
                0,       costheta,          -sintheta);

  gradient = t * sgradient;

  return gradient;
}
