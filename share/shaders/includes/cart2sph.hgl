//-------------------------------------------------------------------------
// Cartesian -> Spherical transform
//-------------------------------------------------------------------------
vec3 cart2sph(vec3 cartesian)
{
  const float pi = 3.14159;

  vec3 spherical;

  spherical.z = length(cartesian.xyz);
  spherical.x = asin(clamp(cartesian.y / length(cartesian.yz), -1.0, 1.0));
  spherical.y = acos(clamp(cartesian.x / spherical.z, -1.0, 1.0));
  
  if (cartesian.z >= 0.0)
  {
    if (spherical.x < 0.0) spherical.x += 2.0*pi;
  }
  else
  {
    spherical.x = pi - spherical.x;
  }
  
  // Spherical coordinates 
  // spherical.y (0, pi) 
  // spherical.x (0, 2pi) 
  
  spherical.y = (spherical.y / (pi));
  spherical.x = (spherical.x / (2.0*pi));

  // Normalized spherical coordinates 
  // spherical.z (0, 1) 
  // spherical.y (0, 1) 
  // spherical.x (0, 1) 
  spherical = (spherical - dmin) * ((tmax - tmin) / (dmax - dmin)) + tmin;

  return spherical;
}
