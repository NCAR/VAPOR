//-------------------------------------------------------------------------
// texture -> layered transform
//
// The 3D grid represented by volumeTexture is non-regular in Z. The 
// Z coordinate of each grid point is given by volumeTexture[zidx].
// This function maps the Z component of texCoord (in "user" coordinates) 
// to a new Z (in texture coordinates) that most closely matches 
// the  user coordinate Z. texCoord.xy is unchanged.
//
//-------------------------------------------------------------------------
uniform sampler3D volumeTexture;
uniform vec3 dimensions;    // ijk dimensions of 3D texture


vec3 tex2lay(vec3 texCoord, int zidx)
{
	vec3 invalid = vec3(-1.0, -1.0, -1.0); // invalid coordinate

	if (dimensions.z<=0) return(invalid);
	float zmin = (1.0 / dimensions.z) * 0.5;
	float zmax = (1.0 - zmin);
	if (texCoord.z<zmin || texCoord.z>zmax) return(invalid);

	// N is the number of iterations used to find Z in the search 
	// algorithm below. 
	// 
	int N = int(ceil(log2(float(dimensions.z))));

	vec3 texCoord0 = texCoord;
	vec3 texCoord1 = texCoord;
	vec3 layered = texCoord;

	texCoord0.z = zmin;
	texCoord1.z = zmax;
	float z0 = texture3D(volumeTexture, texCoord0)[zidx];
	float z1 = texture3D(volumeTexture, texCoord1)[zidx];
	float z = texCoord.z;

	// make sure z is in initial interval
	if (((z-z1) * (z-z0)) > 0.0) {
		return (invalid);
	}

	//
	// Use a binary search to locate the interval containing the 
	// desired 'z' coordinate
	//
	for (int i=0; i<N; i++) {
      float t0save = texCoord0.z;
	  texCoord0.z = (texCoord0.z + texCoord1.z) * 0.5;
	  z0 = texture3D(volumeTexture, texCoord0)[zidx];
      if (z0==z) break;

	  // if interval we guessed is wrong, z must be in other interval
	  if (((z-z1) * (z-z0)) > 0.0) {
		  texCoord1.z = texCoord0.z;
          texCoord0.z = t0save;
		  z1 = texture3D(volumeTexture, texCoord1)[zidx];
	  }
	}
	z0 = texture3D(volumeTexture, texCoord0)[zidx];

	float weight;
	if ((z1-z0)<=0) {
		weight = 0.0;
	}
	else {
		weight = (z-z0) / (z1-z0);
	}
	layered.z = texCoord0.z + (weight * (texCoord1.z-texCoord0.z));

//	clamp() doesn't work, and not sure why it is needed :-(
//
//	layered.z = clamp(layered.z,zmin,zmax);

	if (layered.z < zmin) layered.z = zmin;
	if (layered.z > zmax) layered.z = zmax;

	return(layered);

}
