//
// 2D Data surface renderer
//

varying float lightIntensity;

uniform bool lightingEnabled;
uniform float kd;
uniform float ka;
uniform float ks;
uniform float expS;
uniform vec3 lightDirection;

#ifdef  USE_VERTEX_ATTR 
attribute vec2 vertexDataAttr;
varying vec2 vertexData;
#endif

void main() {

	if (lightingEnabled) {
		vec3 ecPosition = vec3(gl_ModelViewMatrix * gl_Vertex);
		vec3 tnorm = normalize(gl_NormalMatrix * gl_Normal);
		vec3 lightVec = normalize(lightDirection);
		vec3 reflectVec = reflect(-lightVec, tnorm);
		vec3 viewVec = normalize(-ecPosition);

		float spec = clamp(dot(reflectVec, viewVec), 0.0, 1.0);
		spec = pow(spec, expS);

		lightIntensity = ka + kd * max(dot(lightVec, tnorm), 0.0) + ks*spec; 
	}
	else {
		lightIntensity = 1.0;
	}

	gl_TexCoord[0] = gl_MultiTexCoord0;
	gl_Position = ftransform();
	gl_ClipVertex = gl_ModelViewMatrix * gl_Vertex; 


#ifdef  USE_VERTEX_ATTR 
	vertexData = vertexDataAttr;
#endif
}
