#include permute.hgl
#include invpermute.hgl
uniform sampler1D colormap;
uniform sampler3D volumeTexture;
uniform vec3 tmin;
uniform vec3 tmax;	// min and max texture coordinates in range 
uniform vec3 dmin;
uniform vec3 dmax;	// min and max spherical coordinates
uniform vec3 permutation;
uniform bvec2 clip;

vec3 permute(vec3 v);
vec3 invPermute(vec3 v);
//------------------------------------------------------------------ 
// Fragment shader main
//------------------------------------------------------------------ 
void main(void)
{

  const float pi = 3.14159;

  vec3 cartesian = permute(gl_TexCoord[0].xyz);
  vec3 spherical;

  cartesian = dmax.z * (cartesian * 2.0 - 1.0);

  spherical.z = length(cartesian.xyz);

  if (spherical.z > dmax.z || spherical.z < dmin.z)
  {
    gl_FragColor = vec4(0,0,0,0);
  }
  else
  {
    spherical.x = asin(clamp(cartesian.y / length(cartesian.yz), -1.0, 1.0));
    spherical.y = acos(clamp(cartesian.x / spherical.z, -1.0, 1.0));

    if (cartesian.z >= 0.0)
    {
      if (spherical.x < 0.0) spherical.x += 2.0*pi;
    }
    else
    {
      spherical.x = pi - spherical.x;
    }

    // Spherical coordinates 
    // spherical.y (0, pi) 
    // spherical.x (0, 2pi) 
    
    spherical.y = (spherical.y / (pi));
    spherical.x = (spherical.x / (2.0*pi));

    // Normalized spherical coordinates 
    // spherical.z (0, 1) 
    // spherical.y (0, 1) 
    // spherical.x (0, 1) 

    if ((clip.y && (spherical.y < dmin.y || spherical.y > dmax.y)) ||
        (clip.x && (spherical.x < dmin.x || spherical.x > dmax.x)))
    {
      gl_FragColor = vec4(1,1,1,0);
    }
    else
    {
      // Texture coordinates (dmin, dmax) -> (tmin, tmax) 
      spherical = (spherical - dmin) * ((tmax - tmin) / (dmax - dmin))+tmin;

      vec4 intensity = vec4(texture3D(volumeTexture, invPermute(spherical)));
      gl_FragColor = vec4 (texture1D(colormap, intensity.x));
    }
  }
}
