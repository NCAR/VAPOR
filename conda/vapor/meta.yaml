package:
  name: vapor
  version: "3.8.3"

source:
  path: ../..

build:
  skip_compile_pyc:
    - "*.py"
  script_env:
  - DEBUG_BUILD

requirements:
  build:
    # Build-Only
    # ==========================================
    - {{ compiler('cxx') }}
    - make=4.3
    - cmake=3.21.3
    - unzip=6.0
    - jupytext=1.13.8 # Generate notebooks
    - doxygen=1.9.1
    # Both
    # (Needs to be specified manually in both rather than just in host because otherwise conda will install multiple versions of some packages and break the install)
    # ==========================================
    - python=3.9.5
    - numpy=1.21.4
    - assimp=5.0.1
    - freetype=2.10.4
    - hdf5=1.12.1
    - jpeg=9e
    - geotiff=1.6.0
    - udunits2=2.2.26
    - netcdf4=1.5.8
    - libtiff=4.3|4.4
    - proj=7.2.0
    - glm=0.9.9.4
    - mesalib=21.2.5
    - expat=2.4
    - libcxx=14.0
  run:
    # Run only
    - xarray=2022 #=2022.3.0
    - matplotlib=3 #=3.3.2
    - ipython=8 #=8.3.0 
    - jupyter=1 #=1.0.0
    - py-opencv=4 #=4.5.3
    - hdf5plugin=4
    - cppyy=2.2 #=2.2.0 If this is in build conda will load an old clang compiler which fails to compile macOS headers
    - jupyter-vapor-widget=1.0 # [not os.environ.get('DEBUG_BUILD', '1').lower() in ('true', '1', '')]
    - vapor-maps=1.0 # [not os.environ.get('DEBUG_BUILD', '1').lower() in ('true', '1', '')]
    # Both
    - python=3.9 # pin_compatible('python') selects python 3.10 which is not compatible
    - {{ pin_compatible('numpy') }}
    - {{ pin_compatible('assimp') }}
    - {{ pin_compatible('freetype') }}
    - {{ pin_compatible('hdf5') }}
    - {{ pin_compatible('jpeg') }}
    - {{ pin_compatible('geotiff') }}
    - {{ pin_compatible('udunits2') }}
    - {{ pin_compatible('netcdf4') }}
    - libtiff=4.3|4.4 # pin_compatible pins an incompatible version
    - {{ pin_compatible('proj') }}
    - {{ pin_compatible('glm') }}
    - {{ pin_compatible('mesalib') }}
    - {{ pin_compatible('expat') }}
    - {{ pin_compatible('libcxx') }}
