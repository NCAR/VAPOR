version: 2.1

orbs:
  win: circleci/windows@2.2.0

references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  build_win10_installer:
    executor: win/default
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            choco install visualstudio2019-workload-vctools -y
            choco install python -y
            choco install git -y
            choco install cmake -y
            choco install nsis -y
            python -m pip install gdown
            setx /M PATH "%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin"
            msbuild -version
            pwd
            ls
            python .circleci/downloadWin3rdParty.py
      - run:
          name: dos2unix
          command: |
            dos2unix /c/Users/circleci/project/share/shaders/*
            dos2unix /c/Users/circleci/project/share/shaders/main
            dos2unix /c/Users/circleci/project/share/shaders/includes
          shell: bash.exe
      - run:
          name: Build Vapor
          command: |
            Copy-Item site_files\* -Destination .
            mkdir build
            cd build
            git checkout $CIRCLE_BRANCH
            & 'C:\\Program Files\\CMake\\bin\\cmake.exe' -S C:\Users\circleci\project -B C:\Users\circleci\project\build -DDIST_INSTALLER:string=ON -DCMAKE_BUILD_TYPE:STRING=Release -G 'Visual Studio 16 2019' -A x64
            msbuild C:\Users\circleci\project\build\PACKAGE.vcxproj /p:Configuration=Release /p:Platform=x64
            mkdir -p C:\Users\circleci\project\tmp\workspace\installers
            Copy-Item C:\Users\circleci\project\build\*.exe -Destination C:\Users\circleci\project\tmp\workspace\installers
          no_output_timeout: 45m

      - store_artifacts:
          path: C:\Users\circleci\project\tmp\workspace\installers

      - persist_to_workspace:
          root: C:\Users\circleci\project\tmp\workspace
          paths:
            - installers

  build_osx_installer:
    macos:
      xcode: "13.2.0"
    steps:
      - run:
          name: Make VAPOR-Deps
          command: |
            sudo mkdir -p /usr/local/VAPOR-Deps
            sudo chmod -R 777 /usr/local/VAPOR-Deps
            sudo chown -R `whoami` /usr/local/VAPOR-Deps

      #- restore_cache:
      #    keys:
      #      - clang12jafiojeoa;ij;eaw

      - checkout

      - run:
          name: Get third party libraries
          command: |
            pip3 install gdown
            sudo mkdir -p /usr/local/VAPOR-Deps
            sudo chmod 777 /usr/local/VAPOR-Deps
            cd /usr/local/VAPOR-Deps
            gdown https://drive.google.com/uc?id=1Q-IXlP_OgZSXsWKmT-smyrW9xnR-dUfg
            cd /usr/local/VAPOR-Deps
            tar xf 2019-Aug-Darwin.tar.xz -C /usr/local/VAPOR-Deps
            chmod -R 777 /usr/local/VAPOR-Deps

      - run:
          name: Get cmake
          command: |
            brew install cmake

      - run:
          name: Get MacPorts
          command: |
            curl -k -O https://distfiles.macports.org/MacPorts/MacPorts-2.7.1.tar.bz2
            tar xf MacPorts-2.7.1.tar.bz2
            cd MacPorts-2.7.1/
            ./configure
            make -j2
            sudo make install -j2

      - run:
          name: Get libomp
          command: |
            sudo /opt/local/bin/port selfupdate
            (sudo yes || true) | sudo /opt/local/bin/port install libomp
          no_output_timeout: 30m

      - run:
          name: Get clang12
          command: |
            (sudo yes || true) | sudo /opt/local/bin/port install clang-12
            sudo /opt/local/bin/port select --set clang mp-clang-12
            /opt/local/bin/clang++ -v > clangVersion.txt
          no_output_timeout: 30m

      #- save_cache:
      #    key: clang12jafiojeoa;ij;eaw
      #    paths:
      #      - /opt/local/bin
      #      - /opt/local/lib/libomp

      - run:
          name: make VAPOR
          command: |
            cp site_files/site.NCAR site.local
            mkdir build
            cd build
            git checkout $CIRCLE_BRANCH
            export PATH=/opt/local/bin:$PATH
            sudo port select --set clang mp-clang-12
            cmake -DCPACK_BINARY_DRAGNDROP=ON -DCMAKE_BUILD_TYPE:String=Release -DDIST_INSTALLER:string=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DUSE_OMP=ON ..
            make -j2
            make installer -j2
            mkdir -p /tmp/workspace/installers
            mv *.dmg /tmp/workspace/installers
          no_output_timeout: 30m

      - store_artifacts:
          path: /tmp/workspace/installers

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - installers

  build_ubuntu18_installer:
    docker:
      - image: sgpearse/vapor3-ubuntu18:latest

    steps:
      - checkout

      - run:
          name: make installer
          command: |
            cd /root/project/build
            git checkout $CIRCLE_BRANCH
            cmake -DCMAKE_BUILD_TYPE:String=Release -DDIST_INSTALLER:string=ON -DUSE_OMP=ON ..
            make -j2
            make installer -j2
            for f in VAPOR3-*.sh ; do mv "$f" "${f/Linux/Ubuntu18}" ; done
            mkdir -p /tmp/workspace/installers
            mv *.sh /tmp/workspace/installers

      - store_artifacts:
          path: /tmp/workspace/installers

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - installers

  build_centos7_installer:
    docker:
      - image: sgpearse/vapor3-centos7:latest
  
    steps:
      - checkout
  
      - run:
          name: cmake3 and make
          command: |
            cd /root/project/build
            git checkout $CIRCLE_BRANCH
            cmake3 -DCMAKE_BUILD_TYPE:String=Release -DDIST_INSTALLER:string=ON -DUSE_OMP=ON ..
            make -j2
            make installer -j2
            for f in VAPOR3-*.sh ; do mv "$f" "${f/Linux/CentOS7}" ; done
            mkdir -p /tmp/workspace/installers
            mv *.sh /tmp/workspace/installers
      - store_artifacts:
          path: /tmp/workspace/installers
      
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - installers

  build_ubuntu18:
    docker:
      - image: sgpearse/vapor3-ubuntu18:latest

    steps:
      - run:
          name: install python
          command: |
            apt-get update
            apt-get install -y python3
      - checkout

      - run:
          name: make debug
          command: |
            cd /root/project/build
            cmake -DBUILD_TEST_APPS=ON ..
            make -j2 2>&1 | tee /tmp/debugOutput.txt
            make clean
      
      - store_artifacts:
          path: /tmp/debugOutput.txt

      - run:
          name: make debug with omp
          command: |
            cd /root/project/build
            cmake -DBUILD_TEST_APPS=ON -DUSE_OMP=ON ..
            make -j2 2>&1 | tee /tmp/debugOutputWithOMP.txt
            make clean
      
      - store_artifacts:
          path: /tmp/debugOutputWithOMP.txt

      - run:
          name: make release
          command: |
            cd /root/project/build
            cmake -DBUILD_TEST_APPS=ON -DCMAKE_BUILD_TYPE=Release ..
            make -j2 2>&1 | tee /tmp/releaseOutput.txt
            make clean
      
      - store_artifacts:
          path: /tmp/releaseOutput.txt

      - run:
          name: make release with omp
          command: |
            cd /root/project/build
            cmake -DBUILD_TEST_APPS=ON -DUSE_OMP=ON ..
            make -j2 2>&1 | tee /tmp/releaseOutputWithOMP.txt
      - store_artifacts:
          path: /tmp/releaseOutputWithOMP.txt

      - run:
          name: Smoke test
          command: |
            python3 /root/project/test_apps/smokeTests/smokeTests.py -testDataRoot=/smokeTestData/smokeTestData -binaryRoot=/root/project/build/test_binaries -resultsDir=/root/project/test_apps/smokeTests/testResults
      - store_artifacts:
          path: /root/project/test_apps/smokeTests/testResults

      - run:
          name: check for Debug warnings
          command: |
            if grep -q warning /tmp/debugOutput.txt; then
               cat /tmp/debugOutput.txt
               exit -1
            else
               exit 0
            fi
      - run:
          name: check for Debug OMP warnings
          command: |
            if grep -q warning /tmp/debugOutputWithOMP.txt; then
               cat /tmp/debugOutput.txt
               exit -1
            else
               exit 0
            fi
      - run:
          name: check for Release warnings
          command: |
            if grep -q warning /tmp/releaseOutput.txt; then
               cat /tmp/releaseOutput.txt
               exit -1
            else
               exit 0
            fi
      - run:
          name: check for Release OMP warnings
          command: |
            if grep -q warning /tmp/releaseOutputWithOMP.txt; then
               cat /tmp/releaseOutput.txt
               exit -1
            else
               exit 0
            fi

  build_centos7:
      docker:
        - image: sgpearse/vapor3-centos7:latest
  
      steps:
        - checkout
  
        - run:
            name: make debug
            command: |
              cd /root/project/build
              cmake3 -DBUILD_TEST_APPS=ON ..
              make -j2 2>&1 | tee /tmp/debugOutput.txt
              make clean
        
        - store_artifacts:
            path: /tmp/debugOutput.txt
  
        - run:
            name: make debug with omp
            command: |
              cd /root/project/build
              cmake3 -DBUILD_TEST_APPS=ON -DUSE_OMP=ON ..
              make -j2 2>&1 | tee /tmp/debugOutputWithOMP.txt
              make clean
        - store_artifacts:
            path: /tmp/debugOutputWithOMP.txt
  
        - run:
            name: make release
            command: |
              cd /root/project/build
              cmake -DBUILD_TEST_APPS=ON -DCMAKE_BUILD_TYPE=Release ..
              make -j2 2>&1 | tee /tmp/releaseOutput.txt
              make clean
        - store_artifacts:
            path: /tmp/releaseOutput.txt
        
        - run:
            name: make release with omp
            command: |
              cd /root/project/build
              cmake -DBUILD_TEST_APPS=ON -DUSE_OMP=ON ..
              make -j2 2>&1 | tee /tmp/releaseOutputWithOMP.txt
        - store_artifacts:
            path: /tmp/releaseOutputWithOMP.txt
  
        - run:
            name: check for Debug warnings
            command: |
              if grep -q warning /tmp/debugOutput.txt; then
                 cat /tmp/debugOutput.txt
                 exit -1
              else
                 exit 0
              fi
        - run:
            name: check for Release warnings
            command: |
              if grep -q warning /tmp/releaseOutput.txt; then
                 cat /tmp/releaseOutput.txt
                 exit -1
              else
                 exit 0
              fi

  test_clang_format:
    docker:
      - image: ubuntu:20.04
    
    steps:
      - run:
          name: install deps
          command: |
            apt-get update
            apt-get install -y clang-format-11
            apt-get install -y git
      - checkout

      - run:
          name: run clang-format
          command: |
            for COMMIT in $(git log --pretty=format:%h main...$BRANCH); do
                for FILE in $(git diff --name-only origin/main |grep -E "\.h|\.cpp"); do
                    NUMBERS=""
                    for NUMBER in $(git blame --line-porcelain "$FILE" | egrep ^$COMMIT | cut -d' ' -f3); do
                        NUMBERS="$NUMBERS --lines $NUMBER:$NUMBER "
                    done
                    if [ "$NUMBERS" != "" ]; then
                        echo "  Running clang-format on $FILE"
                        clang-format-11 --dry-run $FILE $NUMBERS >> /tmp/clang-format.txt 2>&1
                    fi
                done
            done
      - store_artifacts:
          path: /tmp/clang-format.txt

      - run:
          name: check formatting 
          command: |
            if grep -q warning /tmp/clang-format.txt; then
               cat /tmp/clang-format.txt
               exit -1
            else
               exit 0
            fi

  check_leaks:
    docker:
      - image: sgpearse/vapor3-ubuntu18:latest

    steps:
      - checkout

      - run:
          name: cmake and make
          command: |
            cd /VAPOR
            git pull
            cd build
            cmake -DCMAKE_BUILD_TYPE:String=Release ..
            make -j2
            #valgrind --leak-check=yes bin/vapor > /tmp/output.txt
            valgrind --leak-check=yes bin/vaporpychecker &> /tmp/vaporpychecker.txt
            #valgrind --leak-check=yes bin/vapor &> /tmp/vapor.txt
            #bin/vapor &> /tmp/vapor.txt
      - store_artifacts:
          path: /tmp/*.txt

  release_weekly_installers:
    macos:
      xcode: "12.4.0"
    steps:
      - checkout
      #- run:
      #    name: get main
      #    command: |
      #      git checkout main
      #      git pull --no-commit && git commit --allow-empty -m "Merge"
      #      git reset --hard origin/main
      - *attach_workspace
      - run:
          name: publish release
          command: |
            cd /Users/distiller/project
            hash=`git rev-parse HEAD`
            tag="Weekly"
            cd /tmp/workspace/installers
            brew install ghr
            endl=$'\n'
            title="sha 256"$endl
            a="Ubuntu18:  "
            sha=`shasum -a 256 VAPOR3*Ubuntu*`
            ubuntuSha=$a$sha$endl
            os="CentOS:    "
            sha=`shasum -a 256 VAPOR3*CentOS7*`
            centosSha=$os$sha$endl
            #os="OSX:       "
            #sha=`shasum -a 256 VAPOR3*Darwin*`
            #osxSha=$os$sha$endl
            #os="Windows:   "
            #sha=`shasum -a 256 VAPOR3*win64*`
            #winSha=$os$sha$endl
            shaMessage="$title$ubuntuSha$centosSha$osxSha$winSha"
            date=`date +"%d_%m_%y"`
            echo $shaMessage > "/tmp/workspace/installers/sha256.txt"
            echo ghr -b "Weekly installers are untested an may not be stable.  Built with commit ${hash} on ${date} \(DD-MM-YY\)" -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -prerelease -c ${CIRCLE_SHA1} -recreate -c ${hash} -n ${tag} ${tag} /tmp/workspace/installers
            ghr -b "Weekly installers are untested an may not be stable.  Built with commit ${hash} on ${date} \(DD-MM-YY\)" -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -prerelease -c ${CIRCLE_SHA1} -recreate -c ${hash} -n ${tag} ${tag} /tmp/workspace/installers

workflows:
  version: 2
  build:
    jobs:
      - build_ubuntu18
      - build_centos7
      - test_clang_format
      #- build_win10_installer
      #- build_osx_installer
      #- build_ubuntu18_installer
      #- build_centos7_installer
      #- release_weekly_installers:
      #    requires:
      #      - build_ubuntu18_installer
      #      - build_centos7_installer
      #      - build_osx_installer
      #      - build_win10_installer
  weekly:
      triggers:
        - schedule:
             cron: "1 16 * * 4" #Mountain Standard Time +7
             filters:
               branches:
                 only: main
      jobs:
        - build_ubuntu18_installer
        - build_centos7_installer
        - build_osx_installer
        - build_win10_installer
        - release_weekly_installers:
            requires:
              - build_ubuntu18_installer
              - build_centos7_installer
              - build_osx_installer
              - build_win10_installer
