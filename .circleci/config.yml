anchors:
  - &srcLibs          "2024-Sept-src"
  - &macOSx86Libs     "2024-Sept-macOSx86"
  - &appleSiliconLibs "2024-Sept-appleSilicon"
  - &u20Libs          "2023-Sept-Ubuntu20"

version: 2.1

orbs:
  win: circleci/windows@2.2.0

references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  get_libraries:
    parameters:
      useAWS:
        type: boolean
        default: true
      fileName:
        type: string
      sudo:
        type: string
        default: ""
      dir:
        type: string
        default: "/usr/local/VAPOR-Deps"
    steps:
      - run:
          name: get third party libraries
          command: |
              # if /usr/local/VAPOR-Deps is empty, acquire libraries 
              if [ ! -d <<parameters.dir>> ]; then
                <<parameters.sudo>> mkdir -p <<parameters.dir>>
                <<parameters.sudo>> chmod -R 777 <<parameters.dir>>
                <<parameters.sudo>> chown -R `whoami` <<parameters.dir>>
                wget https://vaporawsbucket.s3.us-west-2.amazonaws.com/<<parameters.fileName>>.tar.xz
                tar -xf <<parameters.fileName>>.tar.xz -C <<parameters.dir>>
              fi

  build_vapor:
    parameters:
      branch:
        type: string
        default: main
      beforeCompile:
        type: string
        default: ""
      compileArgs:
        type: string
        default: ""
      moveToCommand:
        type: string
      libDir:
        type: string
        default: "/usr/local/VAPOR-Deps"
      libName:
        type: string
        default: 2023-Sept
    steps:
      - run:
          name: build vapor
          command: |
            libraryDir=`ls <<parameters.libDir>>`
            ln -s $libraryDir <<parameters.libDir>>/current
            cp site_files/site.NCAR site.local
            mkdir -p build
            cd build
            git checkout <<parameters.branch>>
            <<parameters.beforeCompile>>
            cmake \
            -DCMAKE_BUILD_TYPE:String=Release \
            -DDIST_INSTALLER:string=ON \
            -DUSE_OMP=ON \
            <<parameters.compileArgs>> \
            -DTHIRD_PARTY_DIR=<<parameters.libDir>>/current ..
            make -j4
            make installer
            for f in VAPOR3-* ; do mv "$f" "<<parameters.moveToCommand>>" ; done
            mkdir -p /tmp/workspace/installers
            find VAPOR* -maxdepth 1 -type f -exec mv {} /tmp/workspace/installers \;
            ls /tmp/workspace/installers
          no_output_timeout: 30m
      - store_artifacts:
          path: /tmp/workspace/installers
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - installers

  smoke_tests:
    steps:
      - restore_cache:
          name: restore smoke test data
          keys:
            - smoke-test-data
      - run:
          name: Acquire smoke test data
          command: |
            if [ -z "$(ls -A /smokeTestData)" ]; then
                mkdir -p /smokeTestData
                wget https://vaporawsbucket.s3.us-west-2.amazonaws.com/smokeTestData.tar.gz
                tar --no-same-owner -xf /root/project/smokeTestData.tar.gz -C /smokeTestData
                chown -R root:root /smokeTestData
                chmod -R 777 /smokeTestData
            else
                echo "Data already acquired"
            fi
      - save_cache:
          key: smoke-test-data
          paths:
            - /smokeTestData
      - run:
          name: Smoke tests
          command: |
            python3 ~/project/test_apps/smokeTests/smokeTests.py \
            -testDataRoot=/smokeTestData/smokeTestData \
            -binaryRoot=~/project/build/test_binaries \
            -resultsDir=~/project/test_apps/smokeTests/testResults
      - store_artifacts:
          path: ~/project/test_apps/smokeTests/testResults

  get_macos_dependencies:
    steps:
      - run:
          name: Get dependencies
          command: |
            #Caching clang would miss every couple of weeks and require ~2 hours of build time.
            #Instead of caching it, we're just going to host it on aws and download it.
            wget https://vaporawsbucket.s3.us-west-2.amazonaws.com/portClang.tar.xz
            sudo tar -xf portClang.tar.xz -C /

            brew install cmake
          no_output_timeout: 45m

jobs:
  build_win10_installer:
    executor: win/default
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            choco install visualstudio2019-workload-vctools -y
            choco install python -y
            choco install git -y
            choco install cmake -y
            choco install nsis -y
            python -m pip install gdown
            setx /M PATH "%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin"
            msbuild -version
            pwd
            ls
            python .circleci/downloadWin3rdParty.py
          no_output_timeout: 20m
      - run:
          name: dos2unix
          command: |
            dos2unix /c/Users/circleci/project/share/shaders/*
            dos2unix /c/Users/circleci/project/share/shaders/main
            dos2unix /c/Users/circleci/project/share/shaders/includes
          shell: bash.exe
      - run:
          name: Build Vapor
          command: |
            Copy-Item site_files\* -Destination .
            mkdir build
            cd build
            git reset --hard origin/main
            & 'C:\\Program Files\\CMake\\bin\\cmake.exe' -S C:\Users\circleci\project -B C:\Users\circleci\project\build -DDIST_INSTALLER:string=ON -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_OSP=OFF -G 'Visual Studio 16 2019' -A x64
            msbuild C:\Users\circleci\project\build\PACKAGE.vcxproj /p:Configuration=Release /p:Platform=x64
            mkdir -p C:\Users\circleci\project\tmp\workspace\installers
            Copy-Item C:\Users\circleci\project\build\*.exe -Destination C:\Users\circleci\project\tmp\workspace\installers
            if (!(Test-Path -Path C:\Users\circleci\project\tmp\workspace\installers\*.exe)) {
              Write-Error "Build failed: No installers found"
              exit 1
            }
          no_output_timeout: 45m

      - store_artifacts:
          path: C:\Users\circleci\project\tmp\workspace\installers

      - persist_to_workspace:
          root: C:\Users\circleci\project\tmp\workspace
          paths:
            - installers

  build_macOSx86_installer:
    macos:
      xcode: "14.3.1"
    resource_class: macos.m1.large.gen1
    steps:
      - checkout
      - get_libraries:
          fileName: *macOSx86Libs
          sudo: sudo
      - get_macos_dependencies
      - build_vapor:
          beforeCompile: export PATH=/opt/local/bin:$PATH; softwareupdate --install-rosetta --agree-to-license
          compileArgs: |
            -DCMAKE_BUILD_TYPE:String=Release \
            -DDIST_INSTALLER:string=ON \
            -DUSE_OMP=ON \
            -DCPACK_BINARY_DRAGNDROP=ON \
            -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang \
            -DCMAKE_OSX_ARCHITECTURES=x86_64  \
            -DTHIRD_PARTY_DIR=/usr/local/VAPOR-Deps/current \
          moveToCommand: ${f/Darwin/macOSx86}

  build_appleSilicon_installer:
    macos:
      xcode: "14.3.1"
    resource_class: macos.m1.large.gen1
    steps:
      - checkout
      - get_libraries:
          fileName: *appleSiliconLibs
          sudo: sudo
      - get_macos_dependencies
      - build_vapor:
          beforeCompile: export PATH=/opt/local/bin:$PATH
          compileArgs: |
            -DCMAKE_BUILD_TYPE:String=Release \
            -DDIST_INSTALLER:string=ON \
            -DUSE_OMP=ON \
            -DCPACK_BINARY_DRAGNDROP=ON \
            -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang \
            -DTHIRD_PARTY_DIR=/usr/local/VAPOR-Deps/current \
          moveToCommand: ${f/Darwin/AppleSilicon}

  build_python_api_ubuntuDebug:
    docker:
      - image: conda/miniconda3 # Debian based docker image

    resource_class: xlarge

    steps:
      - checkout

      - run:
          name: conda build .
          command: |
            cd /root/project/conda
            conda update -y -n base -c defaults conda
            conda install -y conda-build
            conda config --add channels conda-forge
            conda config --add channels ncar-vapor
            conda build .
            mkdir /usr/local/conda-bld/linux-64/tarBallDir
            mv /usr/local/conda-bld/linux-64/*.tar.bz2 /usr/local/conda-bld/linux-64/tarBallDir
          no_output_timeout: 180m
 
      - store_artifacts:
          path: /usr/local/conda-bld/linux-64/tarBallDir

  build_python_api_ubuntu:
    docker:
      - image: conda/miniconda3 # Debian based docker image

    resource_class: large

    steps:
      - checkout

      - run:
          name: acquire map image archive
          command: |
            cd /root
            # The following resolves the error "E: The repository 'http://security.debian.org/debian-security stretch/updates Release' does not have a Release file."
            echo "deb http://archive.debian.org/debian stretch main contrib non-free" > /etc/apt/sources.list

            apt update
            apt install -y git
            git clone https://github.com/NCAR/VAPOR-Data.git

      - run:
          name: build conda installer
          command: |
            conda update -y -n base -c defaults conda
            conda config --add channels ncar-vapor
            conda config --add channels conda-forge
            conda install -y conda-build
            cd /root/project/conda

            #conda build .
            DEBUG_BUILD=false MAP_IMAGES_PATH="/root/VAPOR-Data/images" conda build .
            mkdir /usr/local/conda-bld/linux-64/tarBallDir
            mv /usr/local/conda-bld/linux-64/*.tar.bz2 /usr/local/conda-bld/linux-64/tarBallDir
          no_output_timeout: 180m

      - store_artifacts:
          path: /usr/local/conda-bld/linux-64/tarBallDir

  build_python_api_osx:
    macos:
      xcode: "13.4.1"

    steps:
      - checkout

      - run:
          name: install miniconda
          command: |
            brew install wget
            wget https://repo.continuum.io/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p ~/miniconda

      - run:
          name: acquire map image archive
          command: |
            cd /Users/distiller
            git clone https://github.com/NCAR/VAPOR-Data.git

      - run:
          name: conda build .
          command: |
            cd /Users/distiller/project/conda
            /Users/distiller/miniconda/bin/conda install -y conda-build anaconda conda-verify
            /Users/distiller/miniconda/bin/conda config --add channels conda-forge
            DEBUG_BUILD=false MAP_IMAGES_PATH="/Users/distiller/VAPOR-Data/images" /Users/distiller/miniconda/bin/conda build .
            mkdir -p /tmp/workspace/installers
            mv /Users/distiller/miniconda/conda-bld/osx-64/*.tar.bz2 /tmp/workspace/installers
            cd /tmp/workspace/installers
            fileName=${ls}
            newFileName=${fileName//vapor/vaporUbuntu}
          no_output_timeout: 30m

      - store_artifacts:
          path: /tmp/workspace/installers

  suse_smoke_tests:
    docker:
      - image: opensuse/leap
    resource_class: medium
    steps:
      - suse_prerequisites
      - attach_workspace:
          at: /
      - smoke_tests

  build_linux_installer:
    docker:
      - image: ubuntu:20.04

    resource_class: xlarge

    steps:
      - checkout

      - run:
          name: acquire prerequisites
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt update
            apt install -y curl
            apt install -y xz-utils
            apt install -y git
            apt install -y g++
            apt install -y libomp-dev
            apt install -y freeglut3-dev
            apt install -y libexpat1-dev
            apt install -y libglib2.0-0
            apt install -y libdbus-1-3
            apt install -y valgrind
            apt install -y clang-tidy
            apt install -y lsb-release
            apt install -y python3-pip
            pip3 install gdown
            git config --global --add safe.directory /tmp/_circleci_local_build_repo

            # all for cmake
            apt-get update
            apt-get install -y gpg wget
            wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
            dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
            DEBIAN_FRONTEND=noninteractive apt install -y software-properties-common
            apt-add-repository -y 'deb https://apt.kitware.com/ubuntu/ focal main'
            apt install -y cmake --allow-unauthenticated
     
            # for AppImage
            apt install -y \
                libxcb-icccm4-dev \
                libxcb-image0 \
                libxcb-keysyms1 \
                libxcb-render-util0 \
                libxkbcommon-x11-0 \
                desktop-file-utils

      - restore_cache:
          name: restore intel's oneapi
          keys:
            - intelOneapi
      - run:
          name: acquire intel hpckit for bundling ospray
          command: |
            # if not restored from cache, acquire oneapi
            if [ ! -d /opt/intel/oneapi ]; then
              # For bundling Ospray, which wants Intel's MPI implementation to be bundled
              apt install -y linux-headers-5.15.0-1053-aws
              wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
              echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list
              apt update
              apt install -y intel-hpckit
            fi
      - save_cache:
          key: intelOneapi
          paths:
            - /opt/intel/oneapi

      - restore_cache:
          name: restore third party libraries
          keys:
            - ubuntu-libs-mar2023
      - get_libraries:
          fileName: *u20Libs
      - save_cache:
          key: ubuntu-libs-mar2023
          paths:
            - /usr/local

      - build_vapor:
          moveToCommand: ${f/Linux/Ubuntu20}
          compileArgs: |
            -DDIST_APPIMAGE=ON \
            -DBUILD_TEST_APPS=ON \
  
      - smoke_tests

  release_weekly_installers:
    macos:
      xcode: "13.4.1"
    steps:
      - checkout
      - *attach_workspace
      - run:
          name: publish release
          command: |
            cd /Users/distiller/project
            hash=`git rev-parse HEAD`
            tag="Weekly"
            cd /tmp/workspace/installers
            brew install ghr
            brew install gh

            current_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            release_date=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/NCAR/VAPOR/releases/latest --jq ".published_at")
            current_date_sec=$(date -jf "%Y-%m-%dT%H:%M:%SZ" "$current_date" +"%s")
            release_date_sec=$(date -jf "%Y-%m-%dT%H:%M:%SZ" "$release_date" +"%s")
            weeks_since_release=$(( ($current_date_sec - $release_date_sec) / 604800 ))
            for installer in VAPOR*3*; do
              extension="${installer##*.}"
              new_name="${installer%.*}-w$weeks_since_release.$extension"
              mv "$installer" "$new_name"
            done

            endl=$'\n'
            title="sha 256"$endl
            a="AppImage:  "
            sha=`shasum -a 256 VAPOR*.AppImage`
            linuxSha=$a$sha$endl
            os="OSX:       "
            sha=`shasum -a 256 VAPOR*x86*.dmg`
            osxSha=$os$sha$endl
            os="AppleSilicon:       "
            sha=`shasum -a 256 VAPOR*AppleSilicon*.dmg`
            siliconSha=$os$sha$endl
            os="Windows:   "
            sha=`shasum -a 256 VAPOR*.exe`
            winSha=$os$sha$endl
            shaMessage="$title$linuxSha$osxSha$siliconSha$winSha"
            date=`date +"%d_%m_%y"`
            echo $shaMessage
            echo $shaMessage > "/tmp/workspace/installers/sha256.txt" 
            echo ghr -b "Weekly installers are untested an may not be stable.  Built with commit ${hash} on ${date} \(DD-MM-YY\)" -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -prerelease -c ${CIRCLE_SHA1} -recreate -c ${hash} -n ${tag} ${tag} /tmp/workspace/installers
            ghr -b "Weekly installers are untested an may not be stable.  Built with commit ${hash} on ${date} \(DD-MM-YY\)" -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -prerelease -c ${CIRCLE_SHA1} -recreate -c ${hash} -n ${tag} ${tag} /tmp/workspace/installers


  build_ubuntu20_libs:
    docker:
      - image: ubuntu:20.04

    resource_class: xlarge

    steps:
      - run:
          name: acquire prerequisites
          command: |
            DEBIAN_FRONTEND=noninteractive
            apt update
            apt install -y xz-utils git curl libomp-dev
            git config --global --add safe.directory /tmp/_circleci_local_build_repo

      - checkout

      - get_libraries:
          fileName: 2023-Sept-src.tar.xz
          #driveID: *srcLibID

      - run:
          name: build libraries
          command: |
            chmod 777 /root/project/scripts/build3rdParty.sh
            /root/project/scripts/build3rdParty.sh -o Ubuntu
          no_output_timeout: 60m

      - build_vapor:
          moveToCommand: ${f/Linux/Ubuntu20}

      - store_artifacts:
          path: /tmp/workspace/installers
      
      - store_artifacts:
          path: /usr/local/VAPOR-Deps/2023-Sept-Ubuntu.tar.xz

  build_macOSx86_libs:
    macos:
      xcode: "13.4.1"

    resource_class: macos.x86.medium.gen2

    steps:
      - checkout

      - run:
          name: Get MacPorts
          command: |
            curl -k -O https://distfiles.macports.org/MacPorts/MacPorts-2.7.1.tar.bz2
            tar xf MacPorts-2.7.1.tar.bz2
            cd MacPorts-2.7.1/
            ./configure
            make -j6
            sudo make install

      - run:
          name: Get clang13
          command: |
            sudo /opt/local/bin/port selfupdate
            (sudo yes || true) | sudo /opt/local/bin/port install clang-13
            sudo /opt/local/bin/port select --set clang mp-clang-13
            /opt/local/bin/clang++ -v > clangVersion.txt
          no_output_timeout: 30m

      - get_libraries:
          fileName: *srcLibs
          sudo: sudo

      - run:
          name: build libraries
          command: |
            chmod 777 /Users/distiller/project/scripts/build3rdParty.sh
            /Users/distiller/project/scripts/build3rdParty.sh -o macOSx86

      - build_vapor:
          beforeCompile: export PATH=/opt/local/bin:$PATH; softwareupdate --install-rosetta --agree-to-license; sudo port select --set clang mp-clang-13
          compileArgs: |
            -DCPACK_BINARY_DRAGNDROP=ON \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_COMPILER=clang \
            -DMACOS_BUILD_ARM64=OFF \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          moveToCommand: ${f/Darwin/macOSx86}

      - store_artifacts:
          path: /tmp/workspace/installers
      
      - store_artifacts:
          path: /usr/local/VAPOR-Deps

  build_AppleSilicon_libs:
    macos:
      xcode: "13.4.1"

    resource_class: macos.m1.large.gen1

    steps:
      - checkout

      - get_libraries:
          driveID: *srcLibs
          sudo: sudo

      - run:
          name: Get MacPorts
          command: |
            curl -k -O https://distfiles.macports.org/MacPorts/MacPorts-2.7.1.tar.bz2
            tar xf MacPorts-2.7.1.tar.bz2
            cd MacPorts-2.7.1/
            ./configure
            make -j8
            sudo make install

      - run:
          name: Get clang13
          command: |
            sudo /opt/local/bin/port selfupdate
            (sudo yes || true) | sudo /opt/local/bin/port install clang-13
            sudo /opt/local/bin/port select --set clang mp-clang-13
            /opt/local/bin/clang++ -v > clangVersion.txt
          no_output_timeout: 30m

      - run:
          name: build libraries
          command: |
            chmod 777 /Users/distiller/project/scripts/build3rdParty.sh
            /Users/distiller/project/scripts/build3rdParty.sh -o appleSilicon

      - build_vapor:
          beforeCompile: export PATH=/opt/local/bin:$PATH
          compileArgs: |
            -DCPACK_BINARY_DRAGNDROP=ON \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_COMPILER=clang \
          moveToCommand: ${f/Darwin/AppleSilicon}

      - store_artifacts:
          path: /tmp/workspace/installers
      
      - store_artifacts:
          path: /usr/local/VAPOR-Deps

  build_win10_libs:
    executor: win/default
    steps:
      - checkout
      - run:
          name: get source files
          command: |
            gdown https://drive.google.com/uc?id=1FG8ngmz9Tk3HKZgGejqwtbkBAVonm91z
            tar xvf ${filename} -C /usr/local/VAPOR-Deps
            msbuild -version
      - run:
          name: build libraries
          command: |
            chmod 777 /root/project/scripts/build3rdParty.sh
            /root/project/scripts/build3rdParty.sh -o Windows

      - store_artifacts:
          path: C:\Users\circleci\project\tmp\workspace\installers

workflows:
  version: 2
  build:
    jobs:
      #- build_python_api_ubuntuDebug
      #- build_python_api_ubuntu
      #- build_python_api_osx
      - build_win10_installer
      # - build_macOS_installers
      #- build_appleSilicon_installer
      #- build_macOSx86_installer
      #- build_linux_installer
      #- build_suse_installer
      #- build_ubuntu20_libs
      # - build_macOSx86_libs
      #- build_AppleSilicon_libs
      #- build_suse_libs
      # - build_windows_libs
      # - release_weekly_installers
      # - release_weekly_installers:
      #    requires:
      #      - build_win10_installer
      #      - build_appleSilicon_installer
      #      - build_macOSx86_installer
      #      - build_linux_installer
  weekly:
      triggers:
        - schedule:
             cron: "0 18 * * 4" #Time is GMT
             filters:
               branches:
                 only: main
      jobs:
        - build_linux_installer
        - build_appleSilicon_installer
        - build_macOSx86_installer
        - build_win10_installer
        #- build_macOS_installers
        #- build_python_api_ubuntu
        #- build_python_api_osx
        - release_weekly_installers:
            requires:
              - build_linux_installer
              - build_appleSilicon_installer
              - build_macOSx86_installer
              - build_win10_installer
              #- build_macOS_installers
              #- build_python_api_ubuntu
              #- build_python_api_osx
